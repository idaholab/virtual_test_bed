[Tests]
  # Syntax tests
  [full_simulation_syntax]
    type = RunApp
    input = 'griffin.i'
    check_input = True
    executable_pattern = 'blue_crab*'
    # A global params is applied to an object parameter which returns a warning because
    # it is not being used
    allow_warnings = true
  []
  [bison_mecha_only_syntax]
    type = RunApp
    input = 'bison_mecha_only.i'
    check_input = True
    executable_pattern = 'bison*|blue_crab*|dire_wolf*'
    allow_warnings = True # material property unsupported outputs
  []
  [bison_thermal_only_syntax]
    type = RunApp
    input = 'bison_thermal_only.i'
    check_input = True
    cli_args = "AuxKernels/active='GetPowerDensity_from_griffin' MultiApps/active='' "
               "Transfers/active=''"
    executable_pattern = 'bison*|blue_crab*|dire_wolf*'
    allow_warnings = True # material property unsupported outputs
  []
  [support_plate_syntax]
    type = RunApp
    input = 'core_support_plate_2d.i'
    check_input = True
    executable_pattern = 'bison*|blue_crab*|dire_wolf*'
  []
  [neutronics_without_multiapp_syntax]
    type = RunApp
    input = 'griffin.i'
    check_input = True
    cli_args = "MultiApps/active='' Transfers/active=''"
    executable_pattern = 'griffin*|blue_crab*|dire_wolf*|fenix*'
  []
  [subchannel_syntax]
    type = RunApp
    input = 'sam_channel.i'
    check_input = True
    executable_pattern = 'sam*|blue_crab*'
    cli_args = '--app SamApp'
  []

  # Regression tests
  [full_simulation]
    type = CSVDiff
    input = 'griffin.i'
    csvdiff = 'assembly.csv'
    cli_args = 'Outputs/file_base=assembly'
    executable_pattern = 'blue_crab*'
    prereq = 'full_simulation_syntax'

    # See issue #265
    rel_err = 1e-3
    # A global params is applied to an object parameter which returns a warning because
    # it is not being used
    allow_warnings = true
  []
  [bison_mecha_only]
    type = CSVDiff
    input = 'bison_mecha_only.i'
    csvdiff = 'bison_mecha_only_out.csv'
    cli_args = 'Outputs/csv=true'
    executable_pattern = 'bison*|blue_crab*|dire_wolf*'
    allow_warnings = True # material property unsupported outputs
    prereq = 'bison_mecha_only_syntax'
  []
  [bison_thermal_only]
    type = CSVDiff
    input = 'bison_thermal_only.i'
    csvdiff = 'bison_thermal_only_out.csv'
    cli_args = "Outputs/csv=true AuxKernels/active='GetPowerDensity_from_griffin' "
               "MultiApps/active='' Transfers/active=''"
    executable_pattern = 'bison*|blue_crab*|dire_wolf*'
    allow_warnings = True # material property unsupported outputs
    prereq = 'bison_thermal_only_syntax'
  []
  [support_plate]
    type = CSVDiff
    input = 'core_support_plate_2d.i'
    csvdiff = 'core_support_plate_2d_out.csv'
    cli_args = 'Outputs/csv=true'
    executable_pattern = 'bison*|blue_crab*|dire_wolf*'
    prereq = 'support_plate_syntax'
  []
  [neutronics_without_multiapp]
    type = CSVDiff
    input = 'griffin.i'
    csvdiff = 'griffin_out.csv'
    cli_args = "MultiApps/active='' Transfers/active=''"
    executable_pattern = 'griffin*|blue_crab*|dire_wolf*|fenix*'
    prereq = 'neutronics_without_multiapp_syntax'
    allow_warnings = true # fission cross sections not provided, only nu-fission
  []
  [subchannel]
    type = CSVDiff
    input = 'sam_channel.i'
    csvdiff = 'sam_channel_out.csv'
    cli_args = '--app SamApp Outputs/csv=true'
    executable_pattern = 'sam*|blue_crab*'
    prereq = 'subchannel_syntax'
  []
[]
